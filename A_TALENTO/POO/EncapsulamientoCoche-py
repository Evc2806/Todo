class Coche:
    def __init__(self, marca, modelo, año):
        # Atributos privados
        self.__marca = marca
        self.__modelo = modelo
        self.__año = año

    # Métodos getters para acceder a los atributos privados
    def get_marca(self):
        return self.__marca

    def get_modelo(self):
        return self.__modelo

    def get_año(self):
       return self.__año

    # Método para saludar e imprimir la información del coche
    def saludar(self):
        print(f"Hola, soy un {self.__marca} {self.__modelo} del año {self.__año}.")

    # Método setter para actualizar el año, si es mayor al año actual
    def set_año(self, nuevo_año):
        from datetime import datetime
        if nuevo_año > datetime.now().year:
            print("El año no puede ser mayor al año actual.")
        else:
            self.__año = nuevo_año

# Ejemplo de uso
coche1 = Coche("Toyota", "Corolla", 2020)
coche1.saludar()  # Debería imprimir: Hola, soy un Toyota Corolla del año 2020.

# Accediendo a los atributos privados mediante los getters
print(coche1.get_marca())  # Toyota
print(coche1.get_modelo())  # Corolla
print(coche1.get_año())  # 2020

# Cambiando el año del coche
coche1.set_año(2021)  # Cambia el año a 2021 si es válido
coche1.saludar()  # Debería imprimir: Hola, soy un Toyota Corolla del año 2021.

# Intentando cambiar el año a un valor mayor al actual
#coche1.set_año(2025)  # Imprimirá un mensaje de error.
